/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int goodNodes(TreeNode* root) {
        // set the value for maximum of the path to each node
        int pathMax = (root->val);
        // base case of one node
        if (root != NULL) {
            // root is 1 and then check left and right nodes, passing along max val in path
            return 1 + nodeCheck(root->left, pathMax) + nodeCheck(root->right, pathMax);
        }
        else {
            return 0;
        }
    }
    
    int nodeCheck(TreeNode* node, int pathwayMax) {
        // if node is there and value in is larger than the largest so far in path
        if (node != NULL && node->val >= pathwayMax) {
            // update largest value
            pathwayMax = node->val;
            // return 1 for this valid node and then check its children with updated maximum
            return 1 + nodeCheck(node->left, pathwayMax) + nodeCheck(node->right, pathwayMax);
        }
        // child but not greater than the max in pathway
        else if (node != NULL) {
            // return 0 for this invalid node and then check its children with same maximum
            return 0 + nodeCheck(node->left, pathwayMax) + nodeCheck(node->right, pathwayMax);
        }
        // 0 return on null
        else {
            return 0;
        }
    }
};
