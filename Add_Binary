class Solution {
public:
    string addBinary(string a, string b) {
        // position swap for longest second
        if (a.length() > b.length()) {
            return addBinary(b, a);
        }
        
        // pad shorter string with '0's to even lengths
        int diff = b.length() - a.length();
        string padding;
        for (int i = 0 ; i < diff ; i++) {
            padding.push_back('0');
        }
        a = padding + a;
        
        string result = "";
        char carry = '0';
        
        // iterate and check for what's to be added (commented out method needing a reversal to be called) 
        for (int i = a.length() - 1 ; i >= 0 ; i--) {
            if (a[i] == '1' && b[i] == '1') {
                if (carry == '1') {
                    //result.push_back('1');
                    result = "1" + result;
                }
                else {
                    //result.push_back('0');
                    result = "0" + result;
                    carry = '1';
                }
            }
            else if (a[i] =='0' && b[i] == '0') {
                if (carry == '1') {
                    //result.push_back('1');
                    result = "1" + result;
                    carry = '0';
                }
                else {
                    //result.push_back('0');
                    result = "0" + result;
                }
            }
            else if (a[i] != b[i]) {
                if (carry == '1') {
                    //result.push_back('0');
                    result = "0" + result;
                }
                else {
                    //result.push_back('1');
                    result = "1" + result;
                }
            }
        }
        
        if (carry == '1') {
            //result.push_back(carry);
            result = "1" + result;
        }
        
        // reverse(result.begin(), result.end());
        
        // return back without leading '0's
        int index = 0;
        while (index + 1 < result.length() && result[index] =='0') {
            index++;
        }
        return (result.substr(index));
    }
};
