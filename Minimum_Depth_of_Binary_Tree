/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        // uneven catch
        if (root == NULL) {
            return 0;
        }
        
        // base case catch (no more children)
        if (root->left == NULL && root->right == NULL) {
            return 1;
        }
        
        // maximize to ensure only altered one is returned
        //  one will be altered at least as both aren't null
        int leftHeight = INT_MAX;
        int rightHeight = INT_MAX;
        
        // check left
        if (root->left != NULL) {
            leftHeight = minDepth(root->left);
        }
        
        // check right
        if (root->right != NULL) {
            rightHeight = minDepth(root->right);
        }
        
        // return shorter of two paths
        return min(leftHeight, rightHeight) + 1;
    }
};
