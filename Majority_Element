class Solution {
public:
    int majorityElement(vector<int>& nums) {
        // to hold count of what we've seen and the potential majority number
        int count = 0;
        int potential;
        
        // iterate through array
        for (int i = 0; i < nums.size(); i++) {
            // if no current majority element, set as currently checking
            if (count == 0) {
                potential = nums[i];
            }
            // increase or decrease our count based upon if number is what we're looking for
            count += (nums[i] == potential) ? 1 : -1;
        }
        
        return potential;
        
        // alternative sorting method
        //  uses principle that whatever is over half of the array will be in the middle of it once sorted
        //sort(nums.begin(), nums.end());
        //return nums[nums.size()/2];
    }
};
