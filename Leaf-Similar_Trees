/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        // vectors for leaf values in left to right order
        vector<int> root1Leaves;
        vector<int> root2Leaves;
        
        // get leaves from both roots
        leafHelper(root1, root1Leaves);
        leafHelper(root2, root2Leaves);
        
        // ensure both are same number of leaves
        if (root1Leaves.size() != root2Leaves.size()) {
            return false;
        }
        
        // check to ensure they are in same order
        for (int i = 0; i < root1Leaves.size(); i++) {
            if (root1Leaves[i] != root2Leaves[i]) {
                return false;
            }
        }
        
        return true;
    }
    
    // helper for getting all leaf values
    void leafHelper(TreeNode* node, vector<int>& leaves) {
        // append to leaf vectors if no children
        if (node->left == NULL && node->right == NULL) {
            leaves.push_back(node->val);
        }
        else {
            // recurse down towards left for leaves first
            if (node->left != NULL) {
                leafHelper(node->left, leaves);
            }
            // recurse down towards right after
            if (node->right != NULL) {
                leafHelper(node->right, leaves);
            }
        }
    }
};
