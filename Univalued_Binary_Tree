/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // recursive helper to visit children
    bool isUniHelper(TreeNode* root, int val) {
        // ensure is same value or back out as false
        if (val != root->val) {
            return false;
        }
        // check both children and return true if only both branches true
        if (root->left != NULL && root->right != NULL) {
            return isUniHelper(root->left, val) && isUniHelper(root->right, val);
        }
        // check left branch
        else if (root->left != NULL) {
            return isUniHelper(root->left, val);
        }
        // check right branch
        else if (root->right != NULL) {
            return isUniHelper(root->right, val);
        }
        // no further branches and val is correct
        return true;
    }
    
    // base call
    bool isUnivalTree(TreeNode* root) {
        // initial root call to helper
        return isUniHelper(root, root->val);
    }
};
