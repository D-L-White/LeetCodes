class Solution {
public:
    int divide(int dividend, int divisor) {
        // future quotient sign check
        int sign = ((dividend < 0) ^ (divisor < 0))
                    ? -1 : 1;
    
        // convert to absolute long long for bit manibulation space
        long long longDividend = (long long)abs(dividend);
        long long longDivisor = (long long)abs(divisor);
        
        long long quotient = 0;
        long long temp = 0;
    
        // bit shifting divisor by i to find when dividend is divisible by it
        for (int i = 31 ; i >= 0 ; --i) {
            // include any previously divisible value with shifted divisor
            if (temp + (longDivisor << i) <= longDividend) {
                // increase previously divisible value by divisible value
                temp += longDivisor << i;
                // set quotient bit found
                quotient |= 1LL << i;
            }
        }
        
        // set sign if necessary
        if (sign != 1) {
            quotient = -quotient;
        }
        
        // check to ensure answer is within bounds
        if (quotient < -2147483648) {
            return -2147483648;
        }
        else if (quotient > 2147483647) {
            return 2147483647;
        }
        else {
            return quotient;
        }   
    }
};
