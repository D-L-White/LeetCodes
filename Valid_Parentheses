class Solution {
public:
    bool isValid(string s) {
        stack <char> parens;
        char latest;
        
        
        // push opening parens to stack
        for (int i = 0 ; i < s.length() ; i++) {
            if (s[i] == '(' || s[i] == '[' || s[i] == '{') {
                parens.push(s[i]);
            }
            // check if closing paren is valid for latest open and remove if so
            else {
                if (parens.empty()) {
                    return false;
                }
                else {
                    latest = parens.top();
                    if (s[i] == ')' && latest == '(' ||
                        s[i] == ']' && latest == '[' ||
                        s[i] == '}' && latest == '{') {
                        parens.pop();
                    }
                    else {
                        return false;
                    }
                }
            }
        }
        // ensure no residual open parens
        if (parens.empty()) {
            return true;
        }
        else {
            return false;
        }
    }
};
