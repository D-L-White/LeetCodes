/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        // holders for inorder result and stack of roots not fully traversed
        vector<int> result;
        stack<TreeNode*> stack;

        // check if have reached end or stack fully empty
        while (root != NULL || stack.empty() == false) {
            // traverse left adding roots until hit bottom
            while (root != NULL) {
                stack.push(root);
                root = root->left;
            }
            // take in last one (leaf) and remove from stack
            root = stack.top();
            stack.pop();
            // record val from latest root
            result.push_back(root->val);
            // check for paths to right
            root = root->right;
        }
        return result;
    }
};
