/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        // recursive base cases of
        //  no length node (nothing for this side)
        if (nums.size() == 0) {
            return NULL;
        }
        //  last node to be made
        if (nums.size() == 1) {
            return new TreeNode(nums[0]);
        }
        
        // get root position
        //  splitting node for recursive calls
        int mid = nums.size()/2;
        
        // create root / splitting node
        TreeNode* root = new TreeNode(nums[mid]);
        
        // split nums for what goes to right and what goes to left
        vector<int> leftInts(nums.begin(), nums.begin() + mid);
        vector<int> rightInts(nums.begin() + mid + 1, nums.end());
        
        // recursively get the mid nodes for left and right of this
        root->left = sortedArrayToBST(leftInts);
        root->right = sortedArrayToBST(rightInts);
        
        // return up and out the mid nodes
        return root;
    }
};
