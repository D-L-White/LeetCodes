class Solution {
public:
    bool buddyStrings(string s, string goal) {
        // need to be of equal length
        if (s.length() != goal.length()) {
            return false;
        }
        
        // if they are already the same
        //  there needs to be at least two of same letter to swap
        if (s == goal) {
            // letter count array
            int letters[26] {};
            // get count of all letters
            for (int i = 0; i < s.length(); i++) {
                letters[s[i] - 'a']++;
                // if we ever find a letter of one we already have
                if (letters[s[i] - 'a'] > 1) {
                    return true;
                }
            }
            // or could wait for all counting to finish before checking
            //for (int count : letters) {
            //    if (count > 1) {
            //        return true
            //    }
            //}
            return false;
        }
        // they're not already the same
        else {
            int first = -1;
            int second = -1;
            
            for (int i = 0; i < s.length(); i++) {
                if (s[i] != goal[i]) {
                    if (first == -1) {
                        first = i;
                    }
                    else if (second == -1) {
                        second = i;
                    }
                    else {
                        return false;
                    }
                }
            }
            
            return (second != -1 && s[first] == goal[second]
                   && s[second] == goal[first]);
        }
    }
};
