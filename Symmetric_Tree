/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        
        if (root == NULL) {
            return false;
        }
        // queues to hold nodes to be checked starting with the roots base
        queue<TreeNode*> queue1;
        queue<TreeNode*> queue2;
        queue1.push(root->left);
        queue2.push(root->right);
        
        // continue while they both are not empty
        while(!queue1.empty() || !queue2.empty()) {
            // temporary nodes pointers for checking through queue
            TreeNode* temp1;
            TreeNode* temp2;
            // access latest and remove
            temp1 = queue1.front();
            temp2 = queue2.front();
            queue1.pop();
            queue2.pop();
            // if both are null, restart loop taking next
            if (temp1 == NULL && temp2 == NULL) {
                continue;
            }
            // if only one is null or values don't match, return false
            if (temp1 == NULL || temp2 == NULL) {
                return false;
            }
            if (temp1->val != temp2->val) {
                return false;
            }
            // add opposite order of children to queues for checking against each other
            queue1.push(temp1->right);
            queue1.push(temp1->left);
            queue2.push(temp2->left);
            queue2.push(temp2->right);
        }
        
        return true;
        
        
        
        // recursive variant:
        // helper to split inspection along left and right for recursive variant
        //return isMirrored(root, root);
    }
    
    // helper for recursive variant
    //bool isMirrored(TreeNode* root1, TreeNode* root2) {
    //    // nothing at either, it's the same
    //    if (root1 == NULL && root2 == NULL) {
    //        return true;
    //    }
    //    
    //    // check that both exist and are same
    //    if (root1 != NULL && root2 != NULL &&
    //        root1->val == root2->val) {
    //        
    //        // check the mirrored against each other, both need to be so
    //        return isMirrored(root1->left, root2->right) &&
    //            isMirrored(root1->right, root2->left);
    //    }  
    //    return false;
    //}
};
